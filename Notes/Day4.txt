
    Lambda Expressions
    ------------------------------

        @FunctionalInterface //we cna have only one abstract method
        interface MyInterface {
            String method();
        }

        class MyClass implements MyInterface {
            public String method(){
                return "...";
            }
        }

        MyInterface obj = new MyClass();
        obj.method();

        MyInterface obj2 = () -> "......";
        obj2.method();

        MyInterface obj3 = () -> {
                                    return "......";
                                }
        obj3.method();


        Supplier            FunctionalInterface whose method has no args but returns 
        Consumer            FunctionalInterface whose method does not return but has args.
        Predicate           FunctionalInterface whose method returns boolean
        Funtional           FunctionalInterface whose method returns and also has args.

        java.util.function      a lot of functional interface.
    
    java.util.stream.Stream

        Stream is a flow data from a dataSource (collection - an array, list , set ..ect).

        public void analyzeAndUpgrad(List<Employee> emps){
            for(Employee e:emps){
                e.setBasic(e.getBasic()+(e.getBasic()*0.1));
                if(e.getBasic()>THRUSHOLD_LIMIT){
                    e.setHRA(e.getHRA()+(e.getHRA()*0.01));
                }
            }
        }

        public void analyzeAndUpgrad(List<Employee> emps){
            emps.stream().forEach((e) -> {e.setBasic(e.getBasic()+(e.getBasic()*0.1));});
            emps.stream().filter((e) -> e.getBasic()>THRUSHOLD_LIMIT )
                            .forEach((e) -> {e.setHRA(e.getHRA()+(e.getHRA()*0.01));;});
        }

        Stream
          .forEach(Consumer)    does not return another strema and is called terminal operation
          .reduce(BinaryOperator)   returns a single value and is called terminal operator
          .collect(Collector)       used for collecting the procced data into a set or list or map

          .filter(Predicate)    returns a new stream of the filtered values, is called intermidate
          .map(Tranform)    returns a new stream of the transformed values, is called intermidate

        int nums[] = {1,2,3,4,5};
        Stream s = Stream.of(nums);
        s.reduce((n1,n2) -> n1+n2); //  (((1+2)+3)+4)+5


    java.io

    java.sql
